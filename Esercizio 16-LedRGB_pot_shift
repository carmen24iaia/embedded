 Scrivere un programma che acquisisca i dati da un sensore e li invii, 
 tramite comunicazione UART, al pc. Il programma deve stare anche in attesa di ricevere, sempre tramite comunicazione UART, un comando di stop 
 (ad esempio un singolo carattere: 'S') che interrompe l'invio dei dati ma non la loro acquisizione ed un segnale di start (ad esempio un singolo carattere: 'P') 
 per riprendere il normale funzionamento.

Se si dispone della IMU mostrata durante le esercitazioni si può utilizzare come sensore esterno, altrimenti fare uso di un sensore di temperatura, 
un potenziometro o qualsiasi altro sensore analogico si abbia a disposizione.

Se possibile, collezionare le misure acquisite in un array di almeno 10 elementi e inviare al pc la media di tali misure. 
Si può usare una semplice media aritmetica o in alternativa una media pesata, che pesi maggiormente gli ultimi valori inseriti nell'array. 
Si noti che, per un corretto funzionamento di questo procedimento, l'acquisizione dei dati deve avvenire con una frequenza almeno 10 volte maggiore rispetto 
alla frequenza di invio dei dati.

Infine, utilizzare un LED RGB di segnalazione come descritto:

    LED di colore verde: fase di acquisizione;
    LED di colore blu: fase di invio dei dati;
    LED di colore rosso: comando di stop ricevuto;
    LED di colore bianco: fase di acquisizione dopo aver ricevuto lo stop;

Se possibile implementare una "libreria" dedicata alla gestione del LED RGB. E, se si dispone di uno Shift Register, lo si può usare per gestire il LED RGB 
come mostrato nelle esercitazioni.

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart2;

uint8_t outputBuffer[1]; // Output Buffer for SPI

char read_value;

uint16_t media;

uint16_t somma;


uint16_t raw_in;
uint16_t pot;
uint16_t buffer[10];

uint16_t flag;


ADC_HandleTypeDef hadc1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_SPI1_Init(void);

void read_UART_input();

/* Define Colours- Shift Register Outputs
  * QA -> NO
  * QB -> RED
  * QC -> NO
  * QD -> GREEN
  * QE -> NO
  * QF -> BLU
  *
  * Q-H G F E D C B A
  * 0b0 0 0 0 0 0 0 0
  * */

 #define RED 0b00000010
 #define GRE 0b00001000
 #define BLU 0b00100000
 #define ORA 0b00001010
 #define VIO 0b00100010
 #define LBL 0b00101000
 #define WHI 0b00101010





void USART2_IRQHandler(void){
	HAL_UART_IRQHandler(&huart2);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART2)
  {
    /* Receive one byte in interrupt mode */
    HAL_UART_Init(&huart2);
  //

   		media = 0;
   		somma = 0;
   		  for (int i = 0; i<10; i++){
   			  raw_in = HAL_ADC_GetValue(&hadc1);
   			  pot = (uint16_t)(raw_in*100/255);
   			  buffer[i] = pot;

   		  }

   		  for(int i = 0; i<10; i++){
   			  somma += buffer[i];
   		  }
   		  media=somma/10;


   		 HAL_UART_Transmit(&huart2, &media, 1, HAL_MAX_DELAY);
   		 HAL_Delay(500);



    }
}


/* Output on Shift Register */
void ShiftReg_out(uint8_t *data, uint16_t size){
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&hspi1, data, size, 100);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);

}



/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();


  /* Configure the system clock */
  SystemClock_Config();




  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_SPI1_Init();



  HAL_ADC_Start(&hadc1);


  uart_init();

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

 	  HAL_UART_RxCpltCallback(&huart2);

 	  HAL_UART_Receive(&huart2, &read_value, 1, 1000);

 	  if(read_value!='S'){
 		 outputBuffer[0] = GRE;
 		 ShiftReg_out(outputBuffer, 1);
 	  }
 	 if(read_value!='P'){
 	  		 outputBuffer[0] = GRE;
 	  		 ShiftReg_out(outputBuffer, 1);
 	  }
 	  if(read_value == 'S'){
 		 outputBuffer[0] = BLU;
 		 ShiftReg_out(outputBuffer, 1);
 		 HAL_Delay(500);
 		 outputBuffer[0] = RED;
 		 ShiftReg_out(outputBuffer, 1);
 		 __disable_irq();
 		 flag = 1;


 	  }
 	  HAL_UART_Receive(&huart2, &read_value, 1, 1000);

 	  __enable_irq();

 	  if(read_value == 'P' && flag == 1){
 		outputBuffer[0] = BLU;
 		ShiftReg_out(outputBuffer, 1);
 		HAL_Delay(500);
 		HAL_UART_Init(&huart2);
 		outputBuffer[0] = WHI;
 		ShiftReg_out(outputBuffer, 1);
 		HAL_Delay(500);

 	  }
 	  flag = 0;





   }
 }

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{


  ADC_ChannelConfTypeDef sConfig = {0};

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }


}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void uart_init()
{
  __USART2_CLK_ENABLE();

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;


  HAL_UART_Init(&huart2);

  /* Peripheral interrupt init*/
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART2_IRQn);
  HAL_NVIC_DisableIRQ(USART2_IRQn);
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void){
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
