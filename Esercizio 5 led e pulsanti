 /*Con la stessa logica utilizzata nell'esempio precedente, abilitare altri due pin di ingresso su due GPIO della porta B, 
 connettendoli ad altri due pulsanti, ed altri due pin di uscita su GPIO della porta A, connettendo altri due LED. 
 Collegare logicamente ogni pulsante (ingresso) ad un LED (in uscita) e fare in modo che alla pressione di ogni pulsante 
 si accenda un LED diverso. Testare il funzionamento dell'intero programma valutando anche le variazioni dei registri tramite 
 interfaccia di debug. 
 Si faccia attenzione ad utilizzare le opportune resistenze per la connessione di LED e pulsanti, come indicato.*/
 
 
 
 /* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();


  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();

  // Abilitazine clock per GPIOA e GPIOC

   RCC->AHB1ENR |= 0x3;


    /* Pulsante su GPIOA 10*/
    GPIOA->MODER &=~(0x03 << 20);
    GPIOA->MODER |= (0x00 << 20);  // Set Input Reset
    GPIOA->PUPDR &=~(0x03 << 20);
    GPIOA->PUPDR |=(0x01 << 20);

    /* Led su GPIOB 10*/
    GPIOB->MODER &=~(0x03 << 12);
    GPIOB->MODER |=(0x1 << 12);
    GPIOB->OTYPER &= ~(0x1 << 6);
    GPIOB->PUPDR &=~(0x03 << 12);
    GPIOB->PUPDR |=(0x01 << 12);
    GPIOB->ODR |= (0x1 << 6);

    /* Pulsante su GIPIOA 8*/

    GPIOA->MODER &=~(0x03 << 16);
    GPIOA->MODER |= (0x00 << 16);  // Set Input Reset
    GPIOA->PUPDR &=~(0x03 << 16);
    GPIOA->PUPDR |=(0x01 << 16);

    /* Led su GPIOB 1*/
    GPIOB->MODER &=~(0x03 << 2);
    GPIOB->MODER |=(0x1 << 2);
    GPIOB->OTYPER &= ~(0x1 << 1);
    GPIOB->PUPDR &=~(0x03 << 2);
    GPIOB->PUPDR |=(0x01 << 2);
    GPIOB->ODR |= (0x1 << 1);

    /* Pulsante su GPIOC 2*/
    GPIOC->MODER &=~(0x03 << 4);
    GPIOC->MODER |= (0x00 << 4);  // Set Input Reset
    GPIOC->PUPDR &=~(0x03 << 4);
    GPIOC->PUPDR |=(0x01 << 4);

   /* Led su GPIOB 15*/
    GPIOB->MODER &=~(0x03 << 30);
    GPIOB->MODER |=(0x1 << 30);
    GPIOB->OTYPER &= ~(0x1 << 15);
    GPIOB->PUPDR &=~(0x03 << 30);
    GPIOB->PUPDR |=(0x01 << 30);
    GPIOB->ODR |= (0x1 << 15);



  /* Infinite loop */

  while (1)
  {
	  if(!(GPIOA->IDR >> 10 & 0x1)){
	  		  GPIOB->ODR ^= (0x1 << 6);
	  		  HAL_Delay(400);
	  	  }
	  if(!(GPIOA->IDR >> 8 & 0x1)){
	  	  		  GPIOB->ODR ^= (0x1 << 1);
	  	  		  HAL_Delay(400);
	  	  	  }

	  if(!(GPIOC->IDR >> 2 & 0x1)){
	  	   GPIOB->ODR ^= (0x1 << 15);
	  	   HAL_Delay(400);
	  }

  }

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */


/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PB1 PB10 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
