Partendo dall'esempio presentato, inserire un terzo pulsante (con una terza ISR) ed un terzo LED. A questo punto, 
con il meccanismo delle flag, realizzare per ogni pulsante premuto una diversa funzione per i LED:

    Cambio stato (toggle) di tutti e tre i LED;
    Lampeggiamento intermittente dei tre LED, per almeno un secondo;
    Accensione e successivo spegnimento in sequenza dei tre LED;


/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_USART2_UART_Init(void);

void processA(void);
void processB(void);
void processC(void);

// Flag
volatile int b_pressed_flag = 0;

void EXTI15_10_IRQHandler(void){
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
	EXTI->PR |= (0x01 << 10); // Clear the EXTI pending register
	b_pressed_flag = 1;
}

void EXTI9_5_IRQHandler(void){
	NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
	EXTI->PR |= (0x01 << 8); // Clear the EXTI pending register
	b_pressed_flag = 2;
}

void EXTI2_IRQHandler(void){
	NVIC_ClearPendingIRQ(EXTI2_IRQn);
	EXTI->PR |= (0x01 << 2); // Clear the EXTI pending register
	b_pressed_flag = 3;
}

int main(void){

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
	  /* Configure the system clock */
	  SystemClock_Config();
	  /* Initialize all configured peripherals */
	  MX_USART2_UART_Init();

	  // Abilitazine clock per GPIOA e GPIOC

	   //RCC->AHB1ENR |= (0x1 << 0);
	   //RCC->AHB1ENR |= (0x1 << 2);
	   RCC->AHB1ENR |= 0x3;


	    /* Pulsante su GPIOA 10*/
	    GPIOA->MODER &=~(0x03 << 20);
	    GPIOA->MODER |= (0x00 << 20);  // Set Input Reset
	    GPIOA->PUPDR &=~(0x03 << 20);
	    GPIOA->PUPDR |=(0x01 << 20);

	    /* Led su GPIOB 10*/
	    GPIOB->MODER &=~(0x03 << 12);
	    GPIOB->MODER |=(0x1 << 12);
	    GPIOB->OTYPER &= ~(0x1 << 6);
	    GPIOB->PUPDR &=~(0x03 << 12);
	    GPIOB->PUPDR |=(0x01 << 12);
	    GPIOB->ODR |= (0x1 << 6);

	    /* Pulsante su GIPIOA 8*/

	    GPIOA->MODER &=~(0x03 << 16);
	    GPIOA->MODER |= (0x00 << 16);  // Set Input Reset
	    GPIOA->PUPDR &=~(0x03 << 16);
	    GPIOA->PUPDR |=(0x01 << 16);

	    /* Led su GPIOB 1*/
	       GPIOB->MODER &=~(0x03 << 2);
	       GPIOB->MODER |=(0x1 << 2);
	       GPIOB->OTYPER &= ~(0x1 << 1);
	       GPIOB->PUPDR &=~(0x03 << 2);
	       GPIOB->PUPDR |=(0x01 << 2);
	       GPIOB->ODR |= (0x1 << 1);

	    /* Pulsante su GPIOC 2*/
	       GPIOC->MODER &=~(0x03 << 4);
	       GPIOC->MODER |= (0x00 << 4);  // Set Input Reset
	       GPIOC->PUPDR &=~(0x03 << 4);
	       GPIOC->PUPDR |=(0x01 << 4);

	   /* Led su GPIOB 15*/
	       GPIOB->MODER &=~(0x03 << 30);
	       GPIOB->MODER |=(0x1 << 30);
	       GPIOB->OTYPER &= ~(0x1 << 15);
	       GPIOB->PUPDR &=~(0x03 << 30);
	       GPIOB->PUPDR |=(0x01 << 30);
	       GPIOB->ODR |= (0x1 << 15);

  /* Gestione interrupts */
  // Abilitazione clock per SYSCFG
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;

  // Abilitare il debug configurando il Debug MCU configuration register
  DBGMCU->CR |= DBGMCU_CR_DBG_SLEEP | DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY;

  SYSCFG->EXTICR[0] |= SYSCFG_EXTICR3_EXTI10_PA;	// External interrupt on GPIOC2
  SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PC;
  SYSCFG->EXTICR[3] |= SYSCFG_EXTICR3_EXTI8_PA; //0x0020U; // External interrupt on GPIOC13

  EXTI->IMR |= (0x01 << 10) | (0x01 << 8) | (0x01 << 2) ;     // Set not masked interrupt
  EXTI->RTSR |= (0x01 << 10) | (0x01 << 8) | (0x01 << 2);    // Rising Edge
  //EXTI->PR |= (0x01 << 10) | (0x01 << 8) | (0x01 << 2); // Clear the EXTI pending register

  // Abilitazione Interrupt
  __enable_irq();
  // Gestione NVIC
  NVIC_SetPriority(EXTI15_10_IRQn, 0);
  NVIC_SetPriority(EXTI9_5_IRQn, 0);
  NVIC_SetPriority(EXTI2_IRQn, 0);
  NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
  NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
  NVIC_ClearPendingIRQ(EXTI2_IRQn);
  NVIC_EnableIRQ(EXTI15_10_IRQn);
  NVIC_EnableIRQ(EXTI9_5_IRQn);
  NVIC_EnableIRQ(EXTI2_IRQn);


  /* Infinite loop */
  while (1){
	  if(b_pressed_flag == 1){
		  processA();
	  }else if(b_pressed_flag == 2){
		  processB();
	  }else if(b_pressed_flag == 3){
		  processC();
	  }

	  if(b_pressed_flag == 0){
		  __WFI();
	  }
  }

}

void processA(void){
	GPIOB->ODR  ^= (0x01 << 6); // Toggle on PA_10
	GPIOB->ODR  ^= (0x01 << 1);
	GPIOB->ODR  ^= (0x01 << 15);
	HAL_Delay(400);

	b_pressed_flag = 0; // Reset Flag
}
void processB(void){

	for(int i = 0; i < 10; i++){
				GPIOB->ODR  ^= (0x01 << 6); // Toggle on PA_10
				GPIOB->ODR  ^= (0x01 << 1);
				GPIOB->ODR  ^= (0x01 << 15);
				HAL_Delay(400);
			}

	b_pressed_flag = 0; // Reset Flag
}

void processC(void){

	for(int i = 0; i < 30; i++){
		GPIOB->ODR  ^= (0x01 << 6); // Toggle on PA_10
		HAL_Delay(100);
		GPIOB->ODR  ^= (0x01 << 1);
		HAL_Delay(100);
		GPIOB->ODR  ^= (0x01 << 15);
		HAL_Delay(100);
	}
	b_pressed_flag = 0;
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
